#include "main.h"
#include "human.h"

GLfloat body_array[] = {
    //body start
    -0.4f, 0.4f, 0.4f,
    -0.4f,-0.4f,0.4f,
    0.4f,0.4f,0.4f,
    0.4f,0.4f,0.4f,
    -0.4f,-0.4f,0.4f,
    0.4f,-0.4f,0.4f,
    0.4f, -0.4f, 0.4f,
    0.4f,0.4f,-0.4f,
    0.4f,-0.4f,0.4f,
    0.4f,-0.4f,0.4f,
    0.4f,0.4f,-0.4f,
    0.4f,-0.4f,-0.4f,
    0.4f,0.4f,-0.4f,
    0.4f,-0.4f,-0.4f,
    -0.4f,-0.4f,-0.4f,
    -0.4f,-0.4f,-0.4f,
    0.4f,0.4f,-0.4f,
    -0.4f,0.4f,-0.4f,
    -0.4f,0.4f,-0.4f,
    -0.4f,-0.4f,-0.4f,
    -0.4f,0.4f,0.4f,
    -0.4f,-0.4f,-0.4f,
    -0.4f,0.4f,0.4f,
    -0.4f,-0.4f,0.4f,
    -0.4f,0.4f,0.4f,
    -0.4f,0.4f,-0.4f,
    0.4f,0.4f,0.4f,
    -0.4f,0.4f,-0.4f,
    0.4f,0.4f,0.4f,
    0.4f,0.4f,-0.4f,
    -0.4f,-0.4f,0.4f,
    -0.4f,-0.4f,-0.4f,
    0.4f,-0.4f,0.4f,
    -0.4f,-0.4f,-0.4f,
    0.4f,-0.4f,0.4f,
    0.4f,-0.4f,-0.4f,
    //body end

    //face start
    -0.15f, 0.95f, 0.15f,
    -0.15f,0.4f,0.15f,
    0.15f,0.95f,0.15f,
    0.15f,0.95f,0.15f,
    -0.15f,0.4f,0.15f,
    0.15f,0.4f,0.15f,
    0.15f, 0.4f, 0.15f,
    0.15f,0.95f,-0.15f,
    0.15f,0.4f,0.15f,
    0.15f,0.4f,0.15f,
    0.15f,0.95f,-0.15f,
    0.15f,0.4f,-0.15f,
    0.15f,0.95f,-0.15f,
    0.15f,0.4f,-0.15f,
    -0.15f,0.4f,-0.15f,
    -0.15f,0.4f,-0.15f,
    0.15f,0.95f,-0.15f,
    -0.15f,0.95f,-0.15f,
    -0.15f,0.95f,-0.15f,
    -0.15f,0.4f,-0.15f,
    -0.15f,0.95f,0.15f,
    -0.15f,0.4f,-0.15f,
    -0.15f,0.95f,0.15f,
    -0.15f,0.4f,0.15f,
    -0.15f,0.95f,0.15f,
    -0.15f,0.95f,-0.15f,
    0.15f,0.95f,0.15f,
    -0.15f,0.95f,-0.15f,
    0.15f,0.95f,0.15f,
    0.15f,0.95f,-0.15f,
    -0.15f,0.4f,0.15f,
    -0.15f,0.4f,-0.15f,
    0.15f,0.4f,0.15f,
    -0.15f,0.4f,-0.15f,
    0.15f,0.4f,0.15f,
    0.15f,0.4f,-0.15f,
    //face end

    //right hand start
    0.4f, 0.55f, 0.1f,
    0.4f,-0.95f,0.1f,   //
    0.6f,0.55f,0.1f,
    0.6f,0.55f,0.1f,
    0.4f,-0.95f,0.1f,   //
    0.6f,-0.95f,0.1f,   //


    0.6f, -0.95f, 0.1f, //
    0.6f,0.55f,-0.1f,
    0.6f,-0.95f,0.1f,   //
    0.6f,-0.95f,0.1f,   //
    0.6f,0.55f,-0.1f,
    0.6f,-0.95f,-0.1f,  //

    0.6f,0.55f,-0.1f,
    0.6f,-0.95f,-0.1f,  //
    0.4f,-0.95f,-0.1f,  //
    0.4f,-0.95f,-0.1f,  //
    0.6f,0.55f,-0.1f,
    0.4f,0.55f,-0.1f,

    0.4f,0.55f,-0.1f,
    0.4f,-0.95f,-0.1f,  //
    0.4f,0.55f,0.1f,
    0.4f,-0.95f,-0.1f,  //
    0.4f,0.55f,0.1f,
    0.4f,-0.95f,0.1f,   //

    0.4f,0.55f,0.1f,
    0.4f,0.55f,-0.1f,
    0.6f,0.55f,0.1f,
    0.4f,0.55f,-0.1f,
    0.6f,0.55f,0.1f,
    0.6f,0.55f,-0.1f,

    0.4f,-0.95f,0.1f,   //
    0.4f,-0.95f,-0.1f,  //
    0.6f,-0.95f,0.1f,   //
    0.4f,-0.95f,-0.1f,  //
    0.6f,-0.95f,0.1f,   //
    0.6f,-0.95f,-0.1f,  //
    //right hand end

    //left hand start
    -0.4f, 0.55f, 0.1f,
    -0.4f,-0.95f,0.1f,
    -0.6f,0.55f,0.1f,
    -0.6f,0.55f,0.1f,
    -0.4f,-0.95f,0.1f,
    -0.6f,-0.95f,0.1f,


    -0.6f, -0.95f, 0.1f,
    -0.6f,0.55f,-0.1f,
    -0.6f,-0.95f,0.1f,
    -0.6f,-0.95f,0.1f,
    -0.6f,0.55f,-0.1f,
    -0.6f,-0.95f,-0.1f,
    -0.6f,0.55f,-0.1f,
    -0.6f,-0.95f,-0.1f,
    -0.4f,-0.95f,-0.1f,
    -0.4f,-0.95f,-0.1f,
    -0.6f,0.55f,-0.1f,
    -0.4f,0.55f,-0.1f,
    -0.4f,0.55f,-0.1f,
    -0.4f,-0.95f,-0.1f,
    -0.4f,0.55f,0.1f,
    -0.4f,-0.95f,-0.1f,
    -0.4f,0.55f,0.1f,
    -0.4f,-0.95f,0.1f,
    -0.4f,0.55f,0.1f,
    -0.4f,0.55f,-0.1f,
    -0.6f,0.55f,0.1f,
    -0.4f,0.55f,-0.1f,
    -0.6f,0.55f,0.1f,
    -0.6f,0.55f,-0.1f,
    -0.4f,-0.95f,0.1f,
    -0.4f,-0.95f,-0.1f,
    -0.6f,-0.95f,0.1f,
    -0.4f,-0.95f,-0.1f,
    -0.6f,-0.95f,0.1f,
    -0.6f,-0.95f,-0.1f,
    //left hand end

    //right leg start
    0.25f, -2.55f, 0.15f,
    0.25f,-0.55f,0.15f,
    0.55f,-2.55f,0.15f,
    0.55f,-2.55f,0.15f,
    0.25f,-0.55f,0.15f,
    0.55f,-0.55f,0.15f,


    0.55f, -0.55f, 0.15f,
    0.55f,-2.55f,-0.15f,
    0.55f,-0.55f,0.15f,
    0.55f,-0.55f,0.15f,
    0.55f,-2.55f,-0.15f,
    0.55f,-0.55f,-0.15f,
    0.55f,-2.55f,-0.15f,
    0.55f,-0.55f,-0.15f,
    0.25f,-0.55f,-0.15f,
    0.25f,-0.55f,-0.15f,
    0.55f,-2.55f,-0.15f,
    0.25f,-2.55f,-0.15f,
    0.25f,-2.55f,-0.15f,
    0.25f,-0.55f,-0.15f,
    0.25f,-2.55f,0.15f,
    0.25f,-0.55f,-0.15f,
    0.25f,-2.55f,0.15f,
    0.25f,-0.55f,0.15f,
    0.25f,-2.55f,0.15f,
    0.25f,-2.55f,-0.15f,
    0.55f,-2.55f,0.15f,
    0.25f,-2.55f,-0.15f,
    0.55f,-2.55f,0.15f,
    0.55f,-2.55f,-0.15f,
    0.25f,-0.55f,0.15f,
    0.25f,-0.55f,-0.15f,
    0.55f,-0.55f,0.15f,
    0.25f,-0.55f,-0.15f,
    0.55f,-0.55f,0.15f,
    0.55f,-0.55f,-0.15f,
    //right leg end

    //left leg start
    -0.25f, -2.55f, 0.15f,
    -0.25f,-0.55f,0.15f,
    -0.55f,-2.55f,0.15f,
    -0.55f,-2.55f,0.15f,
    -0.25f,-0.55f,0.15f,
    -0.55f,-0.55f,0.15f,


    -0.55f, -0.55f, 0.15f,
    -0.55f,-2.55f,-0.15f,
    -0.55f,-0.55f,0.15f,
    -0.55f,-0.55f,0.15f,
    -0.55f,-2.55f,-0.15f,
    -0.55f,-0.55f,-0.15f,
    -0.55f,-2.55f,-0.15f,
    -0.55f,-0.55f,-0.15f,
    -0.25f,-0.55f,-0.15f,
    -0.25f,-0.55f,-0.15f,
    -0.55f,-2.55f,-0.15f,
    -0.25f,-2.55f,-0.15f,
    -0.25f,-2.55f,-0.15f,
    -0.25f,-0.55f,-0.15f,
    -0.25f,-2.55f,0.15f,
    -0.25f,-0.55f,-0.15f,
    -0.25f,-2.55f,0.15f,
    -0.25f,-0.55f,0.15f,
    -0.25f,-2.55f,0.15f,
    -0.25f,-2.55f,-0.15f,
    -0.55f,-2.55f,0.15f,
    -0.25f,-2.55f,-0.15f,
    -0.55f,-2.55f,0.15f,
    -0.55f,-2.55f,-0.15f,
    -0.25f,-0.55f,0.15f,
    -0.25f,-0.55f,-0.15f,
    -0.55f,-0.55f,0.15f,
    -0.25f,-0.55f,-0.15f,
    -0.55f,-0.55f,0.15f,
    -0.55f,-0.55f,-0.15f
    //left leg end

};

Human::Human(float x, float y, float z){
    this->position = glm::vec3(x, y, z);
    this->rotation = 0;
    this->human_cube.length = 0.8f;
    this->human_cube.width = 1.2f;
    this->human_cube.height = 3.5f;
    this->object1 = create3DObject(GL_TRIANGLES, 216, body_array, COLOR_BLACK,GL_FILL);
}

void Human::draw(glm::mat4 VP) {
    Matrices.model = glm::mat4(1.0f);
    glm::mat4 translate = glm::translate (this->position);    // glTranslatef
    glm::mat4 rotate    = glm::rotate((float) (this->rotation * M_PI / 180.0f), glm::vec3(0, 1, 0));
    // No need as coords centered at 0, 0, 0 of cube arouund which we waant to rotate
    // rotate          = rotate * glm::translate(glm::vec3(0, -0.6, 0));
    Matrices.model *= (translate * rotate);
    glm::mat4 MVP = VP * Matrices.model;
    glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);
    draw3DObject(this->object1);
}

void Human::movement(int direction){
    this->human_cube.x = position.x;
    this->human_cube.y = position.y;
    this->human_cube.z = position.z;
    this->position.z -= 0.05*direction*cos((rotation*M_PI)/180);

    this->position.x -= 0.05*direction*sin((rotation*M_PI)/180);
}


